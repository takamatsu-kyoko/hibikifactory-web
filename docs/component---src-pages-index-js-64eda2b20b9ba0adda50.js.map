{"version":3,"file":"component---src-pages-index-js-64eda2b20b9ba0adda50.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/blog_card.js","webpack://gatsby-starter-hello-world/./src/components/blog_grid.js","webpack://gatsby-starter-hello-world/./src/components/change_list_item.js","webpack://gatsby-starter-hello-world/./src/components/change_list.js","webpack://gatsby-starter-hello-world/./src/components/footer.js","webpack://gatsby-starter-hello-world/./src/components/main_menu.js","webpack://gatsby-starter-hello-world/./src/components/header.js","webpack://gatsby-starter-hello-world/./src/components/blog_list_item.js","webpack://gatsby-starter-hello-world/./src/components/blog_list.js","webpack://gatsby-starter-hello-world/./src/components/side_bar.js","webpack://gatsby-starter-hello-world/./src/components/hero.js","webpack://gatsby-starter-hello-world/./src/layouts/home_layout.js","webpack://gatsby-starter-hello-world/./src/components/whatsnew.js","webpack://gatsby-starter-hello-world/./src/pages/index.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default function BlogCard({ blog }) {\n    return (\n        <dl>\n            <dt>Title</dt>\n            <dd><Link to={`/blog/post/${blog.slug}`}>{ blog.frontmatter.title }</Link></dd>\n            <dt>Categories</dt>\n            <dd>{ blog.frontmatter.categories }</dd>\n            <dt>publised_on</dt>\n            <dd>{ blog.frontmatter.published_on }</dd>\n            <dt>update_on</dt>\n            <dd>{ blog.frontmatter.updated_on }</dd>\n        </dl>\n    )\n}\n","import React from \"react\"\n\nimport BlogCard from \"./blog_card\"\n\nexport default function BlogGrid({ blog_posts }) {\n    return (\n        <div>\n            {\n                blog_posts.map(blog => (\n                    <BlogCard blog = { blog.node } key = { blog.node.id }/>\n                ))\n            }\n        </div>\n    )\n}\n","import React from \"react\"\n\nexport default function ChangeListItem({ update }) {\n    return (\n        <li>{ `${update.type}: ${update.summary} (${update.date})` }</li>\n    )\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport ChangeListItem from \"./change_list_item\"\n\nexport default function ChangeList({ limit = undefined }) {\n    const query =useStaticQuery(graphql`\nquery {\n  change_log: allChangelogYaml(sort: {fields: date, order: DESC}) {\n    nodes {\n      id\n      date(formatString: \"YYYY-MM-DD\")\n      summary\n      description\n      url\n      slug\n    }\n  }\n  recent_posts: allMdx(\n    filter: {\n      fields: {\n        fileSourceInstanceName: {eq: \"blog\"},\n        fileName: {eq: \"index\"}\n      },\n      frontmatter: {status: {nin: [\"draft\"]}}\n    }\n    sort: {fields: frontmatter___published_on, order: DESC}\n  ) {\n    nodes {\n      id\n      slug\n      frontmatter {\n        title\n        published_on(formatString: \"YYYY-MM-DD\")\n      }\n    }\n  }\n  recent_updates: allMdx(\n    filter: {\n      fields: {\n        fileSourceInstanceName: {eq: \"blog\"},\n        fileName: {eq: \"index\"}\n      },\n      frontmatter: {status: {nin: [\"draft\"]}}\n    }\n    sort: {fields: frontmatter___updated_on, order: DESC}\n  ) {\n    nodes {\n      id\n      slug\n      frontmatter {\n        title\n        updated_on(formatString: \"YYYY-MM-DD\")\n      }\n    }\n  }\n}\n`)\n    let updates = []\n    for (let item of query.change_log.nodes) {\n        updates.push({\n            id: item.id,\n            type: 'changelog',\n            date: item.date,\n            summary: item.summary,\n            description: item.description,\n            url: item.url,\n            slug: item.slug,\n        })\n    }\n\n    for (let item of query.recent_updates.nodes) {\n        if (item.frontmatter.updated_on === null) {\n            continue\n        }\n        updates.push({\n            id: item.id,\n            type: 'update',\n            date: item.frontmatter.updated_on,\n            summary: item.frontmatter.title,\n            url: null,\n            slug: item.slug,\n        })\n    }\n\n    for (let item of query.recent_posts.nodes) {\n        updates.push({\n            id: item.id,\n            type: 'post',\n            date: item.frontmatter.published_on,\n            summary: item.frontmatter.title,\n            url: null,\n            slug: item.slug,\n        })\n    }\n\n    updates.sort((a, b) => {\n        if (a.date < b.date) return 1\n        if (a.date > b.date) return -1\n        return 0\n    })\n\n    return (\n        <ul>\n            {\n                updates.slice(0, limit ? parseInt(limit) : undefined).map( update  => (\n                    <ChangeListItem key={ update.id } update={ update } />\n                ))\n            }\n        </ul>\n    )\n}\n","import React from \"react\"\n\nexport default function Footer() {\n    return (\n        <footer>\n            <section>\n                <h2>響製作所</h2>\n                <span>https://www.hibikifactory.net/</span>\n            </section>\n            <section>\n                <ul>\n                    <li>高松 響子</li>\n                    <ul>\n                        <li>Twitter: takamatsu_kyoko</li>\n                        <li>Instagram: takamatsu_kyoko</li>\n                        <li>GitHub: takamatsu-kyoko</li>\n                        <li>T&apos;sLove: id 45642</li>\n                    </ul>\n                </ul>\n            </section>\n        </footer>\n    )\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default function MainMenu() {\n    return (\n        <nav>\n            <ul>\n                <li><Link to={`/`}>Home</Link></li>\n                <li><Link to={`/blog/`}>Blog</Link></li>\n                <li>About</li>\n                <li><Link to={`/changelog/`}>Log</Link></li>\n            </ul>\n        </nav>\n    )\n}\n","import React from \"react\"\n\nimport MainMenu from './main_menu'\n\nexport default function Header() {\n    return (\n        <header>\n            <h1>Logo</h1>\n            <MainMenu />\n        </header>\n    )\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default function BlogListItem({ blog }) {\n    return (\n        <li>\n            <Link to={`/blog/post/${blog.slug}`}>{ blog.frontmatter.title }</Link>\n        </li>\n    )\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport BlogListItem from \"./blog_list_item\"\n\nexport default function BlogList() {\n    const data =useStaticQuery(graphql`\nquery {\n  allMdx(\n    filter: {\n      fields: {\n        fileSourceInstanceName: {eq: \"blog\"},\n        fileName: {eq: \"index\"}\n      },\n      frontmatter: {status: {nin: [\"draft\"]}}\n    }\n    sort: {fields: frontmatter___published_on, order: DESC}\n  ) {\n    group(field: frontmatter___categories) {\n      fieldValue\n      edges {\n        node {\n          id\n          slug\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n}\n`)\n    return (\n        <section>\n            <h2>Blog List</h2>\n            {\n                data.allMdx.group.map(category => (\n                    <section key={ category.fieldValue }>\n                        <h3>{ category.fieldValue }</h3>\n                        <ul>\n                            {\n                                category.edges.map(list_item => (\n                                    <BlogListItem key={ list_item.node.id } blog={ list_item.node } />\n                                ))\n                            }\n                        </ul>\n                    </section>\n                ))\n            }\n        </section>\n    )\n}\n","import React from \"react\"\n\nimport BlogList from './blog_list'\n\nexport default function SideBar() {\n    return (\n        <aside>\n            <BlogList />\n        </aside>\n    )\n}\n","import React from 'react'\n\nexport default function Hero() {\n    return (\n        <aside>\n            <section>\n                <h2>hero</h2>\n                <div>hero</div>\n            </section>\n        </aside>\n    )\n}\n","import React from 'react'\n\nimport Header from '../components/header'\nimport Hero from '../components/hero'\nimport SideBar from '../components/side_bar'\nimport Footer from '../components/footer'\n\nexport default function HomeLayout({ children }) {\n    return (\n        <div>\n            <Header />\n            <Hero />\n            <main>\n                { children }\n            </main>\n            <SideBar />\n            <Footer />\n        </div>\n    )\n}\n","import React from \"react\"\n\nimport ChangeList from '../components/change_list'\n\nexport default function WhatsNew() {\n    return (\n        <section>\n            <h2>Whats New!</h2>\n            <ChangeList limit='10' />\n        </section>\n    )\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport HomeLayout from '../layouts/home_layout'\nimport WhatsNew from '../components/whatsnew'\nimport BlogGrid from '../components/blog_grid'\n\nexport default function Home({data}) {\n    return (\n        <HomeLayout>\n            <WhatsNew />\n            <section>\n                <h2>Blog Grid</h2>\n                <BlogGrid blog_posts={ data.recent_posts.edges }/>\n            </section>\n        </HomeLayout>\n    )\n}\nexport const query = graphql`\nquery {\n  recent_posts: allMdx(\n    filter: {\n      fields: {\n        fileSourceInstanceName: {eq: \"blog\"},\n        fileName: {eq: \"index\"}\n      },\n      frontmatter: {status: {nin: [\"draft\"]}}\n    }\n    sort: {fields: frontmatter___published_on, order: DESC}\n    limit: 10\n  ) {\n    edges {\n      node {\n        id\n        slug\n        frontmatter {\n          title\n          categories\n          published_on(formatString: \"YYYY-MM-DD\")\n          updated_on(formatString: \"YYYY-MM-DD\")\n        }\n      }\n    }\n  }\n}\n`\n"],"names":["BlogCard","blog","to","slug","frontmatter","title","categories","published_on","updated_on","BlogGrid","blog_posts","map","node","key","id","ChangeListItem","update","type","summary","date","ChangeList","limit","undefined","query","useStaticQuery","updates","change_log","nodes","item","push","description","url","recent_updates","recent_posts","sort","a","b","slice","parseInt","Footer","MainMenu","Header","BlogListItem","BlogList","data","allMdx","group","category","fieldValue","edges","list_item","SideBar","Hero","HomeLayout","children","WhatsNew","Home"],"sourceRoot":""}